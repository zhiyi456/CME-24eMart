"use strict";
// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.isDashboardExperience = exports.getDashboardExperienceIdentifier = exports.extractDashboardExperienceFromUrl = exports.createDashboardFrame = void 0;
var enums_1 = require("../../enums");
var createDashboardFrame_1 = __importDefault(require("./createDashboardFrame"));
exports.createDashboardFrame = createDashboardFrame_1["default"];
var isDashboardExperience = function (experience) {
    return !!experience && experience.experienceType === enums_1.ExperienceType.DASHBOARD;
};
exports.isDashboardExperience = isDashboardExperience;
var extractDashboardExperienceFromUrl = function (url) {
    var matches = /^https:\/\/[^/]+\/embed\/[^/]+\/dashboards\/([\w-]+)(\?|$)/i.exec(url) || [];
    if (matches.length < 3) {
        return;
    }
    return {
        experienceType: enums_1.ExperienceType.DASHBOARD,
        dashboardId: matches[1]
    };
};
exports.extractDashboardExperienceFromUrl = extractDashboardExperienceFromUrl;
var getDashboardExperienceIdentifier = function (experience) {
    if (!isDashboardExperience(experience)) {
        return;
    }
    var contextId = experience.contextId, experienceType = experience.experienceType, dashboardId = experience.dashboardId, discriminator = experience.discriminator;
    return [contextId, experienceType, dashboardId, discriminator].filter(Boolean).join('-');
};
exports.getDashboardExperienceIdentifier = getDashboardExperienceIdentifier;
