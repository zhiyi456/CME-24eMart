"use strict";
// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var uuid_1 = require("uuid");
var eventManager_1 = __importDefault(require("./eventManager"));
var commons_1 = require("./commons");
var enums_1 = require("./enums");
var control_1 = require("./experiences/control");
var visual_1 = require("./experiences/visual");
var dashboard_1 = require("./experiences/dashboard");
var console_1 = require("./experiences/console");
var qsearch_1 = require("./experiences/qsearch");
var createEmbeddingContext = function (frameOptions) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, onChange, contextId, allExperienceIdentifiers, eventManager, body, controlOptions, buildControlOptions, validateFrameOptions, embedVisual, embedDashboard, embedConsole, embedQSearchBar, embeddingContext;
    var _b;
    return __generator(this, function (_c) {
        _a = (frameOptions || {}).onChange, onChange = _a === void 0 ? null : _a;
        contextId = (0, uuid_1.v4)();
        allExperienceIdentifiers = new Set();
        eventManager = (0, eventManager_1["default"])();
        body = (_b = document.getElementsByTagName('body')) === null || _b === void 0 ? void 0 : _b[0];
        if (!body) {
            onChange === null || onChange === void 0 ? void 0 : onChange({
                eventName: enums_1.ChangeEventName.NO_BODY,
                eventLevel: enums_1.ChangeEventLevel.ERROR,
                message: 'could not locate <body> element in the page'
            }, { frame: null });
            throw new Error('could not locate <body> element in the page');
        }
        buildControlOptions = function (frameOptions) {
            if (!controlOptions) {
                var url = frameOptions.url;
                if (!url) {
                    return;
                }
                var urlInfo = void 0;
                try {
                    urlInfo = (0, commons_1.getUrlInfo)(url);
                }
                catch (error) {
                    return;
                }
                var internalSend = (0, control_1.createControlFrame)(body, {
                    eventManager: eventManager,
                    urlInfo: urlInfo,
                    contextId: contextId
                }, onChange).internalSend;
                controlOptions = {
                    eventManager: eventManager,
                    sendToControlFrame: internalSend,
                    contextId: contextId,
                    timeout: commons_1.FRAME_TIMEOUT
                };
            }
            return controlOptions;
        };
        validateFrameOptions = function (frameOptions, methodName) {
            if (!frameOptions) {
                var errorMessage = "".concat(methodName, " is called without frameOptions");
                onChange === null || onChange === void 0 ? void 0 : onChange({
                    eventName: enums_1.ChangeEventName.NO_FRAME_OPTIONS,
                    eventLevel: enums_1.ChangeEventLevel.ERROR,
                    message: errorMessage,
                    data: {
                        methodName: methodName
                    }
                }, { frame: null });
                throw new Error(errorMessage);
            }
            if (typeof frameOptions !== 'object' || Array.isArray(frameOptions)) {
                var errorMessage = "".concat(methodName, " is called with non-object frameOptions");
                onChange === null || onChange === void 0 ? void 0 : onChange({
                    eventName: enums_1.ChangeEventName.INVALID_FRAME_OPTIONS,
                    eventLevel: enums_1.ChangeEventLevel.ERROR,
                    message: errorMessage,
                    data: {
                        methodName: methodName,
                        frameOptionsType: Array.isArray(frameOptions) ? 'array' : typeof frameOptions
                    }
                }, { frame: null });
                throw new Error(errorMessage);
            }
            var url = frameOptions.url, container = frameOptions.container, width = frameOptions.width, height = frameOptions.height, resizeHeightOnSizeChangedEvent = frameOptions.resizeHeightOnSizeChangedEvent, withIframePlaceholder = frameOptions.withIframePlaceholder, className = frameOptions.className, onExperienceChange = frameOptions.onChange, unrecognizedFrameOptions = __rest(frameOptions, ["url", "container", "width", "height", "resizeHeightOnSizeChangedEvent", "withIframePlaceholder", "className", "onChange"]);
            var unrecognizedFrameOptionNames = Object.keys(unrecognizedFrameOptions);
            if (unrecognizedFrameOptionNames.length > 0) {
                var warnMessage = "".concat(methodName, " is called with unrecognized properties");
                onExperienceChange === null || onExperienceChange === void 0 ? void 0 : onExperienceChange({
                    eventName: enums_1.ChangeEventName.UNRECOGNIZED_FRAME_OPTIONS,
                    eventLevel: enums_1.ChangeEventLevel.WARN,
                    message: warnMessage,
                    data: {
                        unrecognizedFrameOptions: unrecognizedFrameOptionNames
                    }
                }, { frame: null });
                console.warn(warnMessage);
            }
        };
        embedVisual = function (frameOptions, contentOptions) { return __awaiter(void 0, void 0, void 0, function () {
            var controlOptions;
            return __generator(this, function (_a) {
                validateFrameOptions(frameOptions, 'embedVisual');
                controlOptions = buildControlOptions(frameOptions);
                return [2 /*return*/, (0, visual_1.createVisualFrame)(frameOptions, contentOptions, controlOptions, allExperienceIdentifiers)];
            });
        }); };
        embedDashboard = function (frameOptions, contentOptions) { return __awaiter(void 0, void 0, void 0, function () {
            var controlOptions;
            return __generator(this, function (_a) {
                validateFrameOptions(frameOptions, 'embedDashboard');
                controlOptions = buildControlOptions(frameOptions);
                return [2 /*return*/, (0, dashboard_1.createDashboardFrame)(frameOptions, contentOptions, controlOptions, allExperienceIdentifiers)];
            });
        }); };
        embedConsole = function (frameOptions, contentOptions) { return __awaiter(void 0, void 0, void 0, function () {
            var controlOptions;
            return __generator(this, function (_a) {
                validateFrameOptions(frameOptions, 'embedConsole');
                controlOptions = buildControlOptions(frameOptions);
                return [2 /*return*/, (0, console_1.createConsoleFrame)(frameOptions, contentOptions, controlOptions, allExperienceIdentifiers)];
            });
        }); };
        embedQSearchBar = function (frameOptions, contentOptions) { return __awaiter(void 0, void 0, void 0, function () {
            var controlOptions;
            return __generator(this, function (_a) {
                validateFrameOptions(frameOptions, 'embedQSearchBar');
                controlOptions = buildControlOptions(frameOptions);
                return [2 /*return*/, (0, qsearch_1.createQSearchFrame)(frameOptions, contentOptions, controlOptions, allExperienceIdentifiers)];
            });
        }); };
        embeddingContext = {
            embedVisual: embedVisual,
            embedDashboard: embedDashboard,
            embedConsole: embedConsole,
            embedQSearchBar: embedQSearchBar
        };
        return [2 /*return*/, embeddingContext];
    });
}); };
exports["default"] = createEmbeddingContext;
