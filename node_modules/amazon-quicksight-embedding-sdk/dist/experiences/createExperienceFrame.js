"use strict";
// Copyright 2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var uuid_1 = require("uuid");
var commons_1 = require("../commons");
var createIframe_1 = __importDefault(require("../commons/createIframe"));
var enums_1 = require("../enums");
var MESSAGE_RESPONSE_TIMEOUT = 5000;
var createExperienceFrame = function (frameOptions, contentOptions, controlOptions, internalExperience, experienceIdentifier, interceptMessage) {
    var url = frameOptions.url, container = frameOptions.container, _a = frameOptions.width, width = _a === void 0 ? '100%' : _a, _b = frameOptions.height, height = _b === void 0 ? '100%' : _b, withIframePlaceholder = frameOptions.withIframePlaceholder, className = frameOptions.className, onChange = frameOptions.onChange;
    var experienceIframe = null;
    // Decorate change event listener with experience frame's metadata
    var _onChange = function (changeEvent) {
        if (typeof onChange !== 'function') {
            return;
        }
        var metadata = {
            frame: experienceIframe
        };
        onChange(changeEvent, metadata);
    };
    // Make sure container is provided
    if (!container) {
        var message = 'Container is required for the experience';
        _onChange({
            eventName: enums_1.ChangeEventName.NO_CONTAINER,
            eventLevel: enums_1.ChangeEventLevel.ERROR,
            message: message,
            data: {
                experience: internalExperience
            }
        });
        throw new Error(message);
    }
    var _container;
    if (typeof container === 'string') {
        try {
            _container = document.querySelector(container);
        }
        catch (error) {
            var message = error.message;
            _onChange({
                eventName: enums_1.ChangeEventName.INVALID_CONTAINER,
                eventLevel: enums_1.ChangeEventLevel.ERROR,
                message: message,
                data: {
                    experience: internalExperience
                }
            });
            throw error;
        }
    }
    else if (typeof container === 'object' && container.nodeName) {
        _container = container;
    }
    if (!_container) {
        var message = "Invalid container '".concat(container, "' for the experience");
        _onChange({
            eventName: enums_1.ChangeEventName.INVALID_CONTAINER,
            eventLevel: enums_1.ChangeEventLevel.ERROR,
            message: message,
            data: {
                experience: internalExperience
            }
        });
        throw new Error(message);
    }
    var eventManager = controlOptions.eventManager, sendToControlFrame = controlOptions.sendToControlFrame, _c = controlOptions.timeout, timeout = _c === void 0 ? commons_1.FRAME_TIMEOUT : _c;
    var _d = contentOptions || {}, onMessage = _d.onMessage, contentOptionsWithoutOnMessage = __rest(_d, ["onMessage"]);
    var experienceEventListenerBuilder = eventManager.experienceEventListenerBuilder;
    // Decorate message event listener with experience frame's metadata
    var _onMessage = function (messageEvent) {
        var metadata = {
            frame: experienceIframe
        };
        // Intercepting onMessage
        interceptMessage && interceptMessage(messageEvent, metadata);
        onMessage === null || onMessage === void 0 ? void 0 : onMessage(messageEvent, metadata);
    };
    var _e = experienceEventListenerBuilder(experienceIdentifier, _onMessage), addExperienceEventListener = _e.addExperienceEventListener, removeExperienceEventListener = _e.removeExperienceEventListener;
    var _url;
    // Make sure url is provided
    if (url) {
        _url = (0, commons_1.buildExperienceUrl)(url, contentOptionsWithoutOnMessage, internalExperience);
    }
    else {
        _onChange({
            eventName: enums_1.ChangeEventName.NO_URL,
            eventLevel: enums_1.ChangeEventLevel.ERROR,
            message: 'Url is required for the experience',
            data: {
                experience: internalExperience
            }
        });
        throw new Error('Url is required for the experience');
    }
    // Start creating the frame
    var sendToOwnFrame = function (messageEvent) { return __awaiter(void 0, void 0, void 0, function () {
        var eventId, _message;
        return __generator(this, function (_a) {
            eventId = (0, uuid_1.v4)();
            _message = __assign(__assign({}, messageEvent), { eventId: eventId, timestamp: Date.now(), version: commons_1.SDK_VERSION });
            experienceIframe.contentWindow.postMessage(_message, _url);
            if (messageEvent.eventName === enums_1.MessageEventName.ACKNOWLEDGE) {
                return [2 /*return*/, Promise.resolve({
                        success: true
                    })];
            }
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    var eventHandler = function (event) {
                        var responseMessageEvent = event.data;
                        if (responseMessageEvent.eventId === eventId) {
                            window.removeEventListener('message', eventHandler);
                            resolve(event.data.message);
                        }
                    };
                    window.addEventListener('message', eventHandler);
                    setTimeout(function () {
                        window.removeEventListener('message', eventHandler);
                        reject();
                    }, MESSAGE_RESPONSE_TIMEOUT);
                })];
        });
    }); };
    var internalSend = function (messageEvent) { return __awaiter(void 0, void 0, void 0, function () {
        var sendMethod;
        return __generator(this, function (_a) {
            sendMethod = sendToControlFrame || sendToOwnFrame;
            return [2 /*return*/, sendMethod(messageEvent)];
        });
    }); };
    var timeoutInstance;
    timeoutInstance = setTimeout(function () {
        _onChange({
            eventName: enums_1.ChangeEventName.FRAME_NOT_CREATED,
            eventLevel: enums_1.ChangeEventLevel.ERROR,
            message: 'Creating the frame timed out',
            data: {
                experience: internalExperience
            }
        });
        throw new Error('Creating the frame timed out');
    }, timeout);
    var onLoadHandler = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (timeoutInstance) {
                clearTimeout(timeoutInstance);
            }
            _onChange({
                eventName: enums_1.ChangeEventName.FRAME_LOADED,
                eventLevel: enums_1.ChangeEventLevel.INFO,
                message: 'The frame loaded',
                data: {
                    experience: internalExperience
                }
            });
            return [2 /*return*/];
        });
    }); };
    // Create the iframe
    _onChange({
        eventName: enums_1.ChangeEventName.FRAME_STARTED,
        eventLevel: enums_1.ChangeEventLevel.INFO,
        message: 'Creating the frame',
        data: {
            experience: internalExperience
        }
    });
    experienceIframe = (0, createIframe_1["default"])({
        id: experienceIdentifier,
        src: _url,
        width: width,
        height: height,
        container: _container,
        onLoad: onLoadHandler,
        withIframePlaceholder: withIframePlaceholder,
        className: className
    });
    if (!experienceIframe) {
        _onChange({
            eventName: enums_1.ChangeEventName.FRAME_NOT_CREATED,
            eventLevel: enums_1.ChangeEventLevel.ERROR,
            message: 'Failed to create the frame',
            data: {
                experience: internalExperience
            }
        });
        throw new Error('Failed to create the frame');
    }
    _onChange({
        eventName: enums_1.ChangeEventName.FRAME_MOUNTED,
        eventLevel: enums_1.ChangeEventLevel.INFO,
        message: 'The frame mounted',
        data: {
            frame: experienceIframe,
            experience: internalExperience
        }
    });
    var internalAddEventListener = function (eventName, listener) {
        var handler = function (messageEvent, metadata) {
            if (messageEvent.eventName === eventName) {
                listener(messageEvent, metadata);
            }
        };
        addExperienceEventListener(handler);
        return {
            remove: function () {
                removeExperienceEventListener(handler);
            }
        };
    };
    var self = {
        internalAddEventListener: internalAddEventListener,
        internalSend: internalSend,
        frame: experienceIframe
    };
    return self;
};
exports["default"] = createExperienceFrame;
